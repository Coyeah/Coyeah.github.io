{"componentChunkName":"component---src-templates-blog-post-js","path":"/webpack-configuration-summay/","result":{"data":{"site":{"siteMetadata":{"title":"Coyeah's Blog","siteUrl":"https://www.coyeah.top"}},"markdownRemark":{"id":"55cf0388-d9dc-52b8-bdfb-33ed1f468ef8","excerpt":"webpack 学习与配置总结 What is webpack 一款 JS 代码模块化的打包工具。  是使用 webpack 的命令行工具，4.x 版本后使用。 webpack 核心概念 entry：一个可执行模块或库的入口文件。 chunk：多个文件组成一个代码块。体现了 webpack 的打包机制。 loader…","html":"<h2>webpack 学习与配置总结</h2>\n<h3>What is webpack</h3>\n<p>一款 JS 代码模块化的打包工具。</p>\n<p><code class=\"language-text\">webpack-cli</code> 是使用 webpack 的命令行工具，4.x 版本后使用。</p>\n<h3>webpack 核心概念</h3>\n<ul>\n<li><strong>entry</strong>：一个可执行模块或库的入口文件。</li>\n<li><strong>chunk</strong>：多个文件组成一个代码块。体现了 webpack 的打包机制。</li>\n<li><strong>loader</strong>：文件转换器。</li>\n<li><strong>plugin</strong>：插件，用于拓展 webpack 的功能。</li>\n</ul>\n<h3>webpack 构建流程</h3>\n<ol>\n<li>解析 webpack 配置参数，合并从 shell 传入和 webpack.config.js 文件里配置的参数，生产最后的配置结果。</li>\n<li>注册所有配置的插件，好让插件监听 webpack 构建生命周期的事件节点，以做出对应的反应。</li>\n<li>从配置的 entry 入口文件开始解析文件构建 AST 语法树，找出每个文件所依赖的文件，递归下去。</li>\n<li>在解析文件递归的过程中根据文件类型和 loader 配置找出合适的 loader 用来对文件进行转换。</li>\n<li>递归完后得到每个文件的最终结果，根据 entry 配置生成代码块 chunk。</li>\n<li>输出所有 chunk 到文件系统。</li>\n</ol>\n<h3>一个简单的 webpack 配置</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> UglifyPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'uglifyjs-webpack-plugin'</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 入口</span>\n  entry<span class=\"token operator\">:</span> <span class=\"token string\">'./src/index.js'</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// 出口</span>\n  output<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    path<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    filename<span class=\"token operator\">:</span> <span class=\"token string\">'bundle.js'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// loader（转换器）</span>\n  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.jsx?</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        include<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        use<span class=\"token operator\">:</span> <span class=\"token string\">'babel-loader'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// 代码模块路径解析的配置</span>\n  resolve<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    modules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"node_modules\"</span><span class=\"token punctuation\">,</span>\n      path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    extensions<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\".wasm\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".mjs\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".js\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".json\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".jsx\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// plugin（插件）</span>\n  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">UglifyPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 使用 uglifyjs-webpack-plugin 来压缩 JS 代码</span>\n    <span class=\"token comment\">// 如果你留意了我们一开始直接使用 webpack 构建的结果，你会发现默认已经使用了 JS 代码压缩的插件</span>\n    <span class=\"token comment\">// 这其实也是我们命令中的 --mode production 的效果，后续的小节会介绍 webpack 的 mode 参数</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>相关 plugin 与 loader</h3>\n<h4>html-webpack-plugin</h4>\n<p>在使用该插件会为项目创建一个 HTML 文件，并会引用构建出的 JS 文件。也可以通过该插件传递一个自定义（已写好的）HTML 模板。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      filename<span class=\"token operator\">:</span> <span class=\"token string\">'index.html'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 配置输出文件名和路径</span>\n      template<span class=\"token operator\">:</span> <span class=\"token string\">'assets/index.html'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 配置文件模板</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>亦可以通过该插件实例化多个 HTML 页面。</p>\n<h4>css-loader 与 style-loader</h4>\n<ul>\n<li>css-loader 负责解析 CSS 代码，主要为了处理 CSS 中的依赖。</li>\n<li>style-loader 会把 css-loader 解析的结构转为 JS 代码，运行时动态插入 <code class=\"language-text\">style</code> 标签中。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token comment\">// ...</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.css</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        include<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        use<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token string\">'style-loader'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span>\n            loader<span class=\"token operator\">:</span> <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">,</span>\n            options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n              minimize<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 使用 css 的压缩功能</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span>\n            loader<span class=\"token operator\">:</span> <span class=\"token string\">\"postcss-loader\"</span><span class=\"token punctuation\">,</span>\n            options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">autoprefixer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>less-loader</h4>\n<p>CSS 预处理器的相关 loader。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token comment\">// ...</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.less$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        use<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token string\">'style-loader'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span>\n            loader<span class=\"token operator\">:</span> <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">,</span>\n            options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n              minimize<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 使用 css 的压缩功能</span>\n              module<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 开启模块化</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span>\n            loader<span class=\"token operator\">:</span> <span class=\"token string\">'less-loader'</span><span class=\"token punctuation\">,</span>\n             options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n               javascriptEnabled<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n             <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n           <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>url-loader 与 file-loader</h4>\n<p>项目中使用的图片，webpack 不能直接处理。通过添加处理图片的插件进行处理。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n      test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(gif|jpg|jpeg|png|svg)$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n      use<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n        loader<span class=\"token operator\">:</span> <span class=\"token string\">\"url-loader\"</span><span class=\"token punctuation\">,</span>\n        query<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          limit<span class=\"token operator\">:</span> <span class=\"token number\">8192</span><span class=\"token punctuation\">,</span>\n          name<span class=\"token operator\">:</span> <span class=\"token string\">\"images/[name]-[hash:5].[ext]\"</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        loader<span class=\"token operator\">:</span> <span class=\"token string\">\"image-webpack-loader\"</span><span class=\"token punctuation\">,</span>\n        options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          mozjpeg<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 压缩 jpeg 的配置</span>\n            progressive<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            quality<span class=\"token operator\">:</span> <span class=\"token number\">65</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          optipng<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 使用 imagemin-optipng 压缩 png，enable: false 为关闭</span>\n            enabled<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          pngquant<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 使用 imagemin-pngquant 压缩 png</span>\n            quality<span class=\"token operator\">:</span> <span class=\"token string\">'65-90'</span><span class=\"token punctuation\">,</span>\n            speed<span class=\"token operator\">:</span> <span class=\"token number\">4</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          gifsicle<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 压缩 gif 的配置</span>\n            interlaced<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          webp<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 开启 webp，会把 jpg 和 png 图片压缩为 webp 格式</span>\n            quality<span class=\"token operator\">:</span> <span class=\"token number\">75</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>通过设置 <code class=\"language-text\">limit</code>，如果文件小于字节限制，则可以返回 DataURL。</p>\n<h4>Babel</h4>\n<p>在 webpack 配置 Babel，以便于代码中使用 ES6，ES7 标准来编写 JS 代码。</p>\n<p>Babel 的相关配置可以在目录下使用 .babelrc 文件来处理。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.jsx?</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 支持 js 和 jsx</span>\n        include<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// src 目录下的才需要经过 babel-loader 处理</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        loader<span class=\"token operator\">:</span> <span class=\"token string\">'babel-loader'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>启动静态服务</h3>\n<p>通过 webpack-dev-server 在本地开启一个简单的静态服务来进行开发。</p>\n<p>在项目下安装 webpack-dev-server，然后添加启动命令到 package.json 中：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack --mode production\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack-dev-server --mode development\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>webpack 解析代码模块路径</h3>\n<p>webpack 在构建的时候，会解析依赖后再进行加载依赖的模块文件。webpack 在引用时，区分 <code class=\"language-text\">./index.js</code> 和 <code class=\"language-text\">react</code>（区分代码模块或第三方库）是通过模块 <code class=\"language-text\">enhanced-resolve</code> 来处理依赖模块路径的解析的。该模块可以说是 Node.js 的模块路径解析的增强版本，有很多可以自定义的解析配置。</p>\n<h4>关于 Node.js 的模块机制</h4>\n<p>CommonJS 规范解决了一下问题：</p>\n<ul>\n<li>没有模块系统。没有原生的支持密闭作用域或依赖管理</li>\n<li>没有标准库。除了一些核心库外，没有文件系统的 API，没有 IO 流 API 等。</li>\n<li>没有标准接口。没有像 Web Server 或者数据库的统一接口。</li>\n<li>没有包管理系统。不能够自动加载和安装依赖。</li>\n</ul>\n<p>而 Node.js 就是 CommonJS 规范的实现，其自身实现了 require 方法作为其引入模块的方法，同时 NPM 也基于 CommonJS 定义的包规范，实现了依赖管理和模块自动安装等功能。</p>\n<p>Node.js 的模块分为两类，一类为原生（核心）模块，一类为文件模块。原生模块在 Node.js 源代码编译的时候编译进了二进制执行文件，加载的速度最快。另一类文件模块是动态加载的，加载速度比原生模块慢。但是 Node.js 对原生模块和文件模块都进行了缓存，于是在第二次 require 时，是不会有重复开销的。其中原生模块都被定义在 lib 这个目录下面，文件模块则不定性。</p>\n<p>require 方法中的文件查找策略：（按优先级排序）</p>\n<ul>\n<li>文件模块缓存区</li>\n<li>原生模块缓存区</li>\n<li>原生模块</li>\n<li>文件模块</li>\n</ul>\n<h4>webpack 上的一些配置</h4>\n<h5>resolve.alias</h5>\n<p>对常用的文件模块在webpack配置上配置，减少编写相对路径的麻烦。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">alias<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  utils<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src/utils'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 这里使用 path.resolve 和 __dirname 来获取绝对路径</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如果需要进行精确匹配可以使用：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">alias<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  utils$<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src/utils'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 只会匹配 import 'utils'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5>resolve.extensions</h5>\n<p>该配置可以定义在进行模块路径解析时，webpack 会尝试帮你补全那些后缀名来进行查找</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">extensions<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'.wasm'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.mjs'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.json'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.jsx'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">// 这里的顺序代表匹配后缀的优先级，例如对于 index.js 和 index.jsx，会优先选择 index.js</span></code></pre></div>\n<h5>resolve.modules</h5>\n<p>这样配置在某种程度上可以简化模块的查找，提升构建速度。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">resolve<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  modules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'node_modules'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 指定当前目录下的 node_modules 优先查找</span>\n    <span class=\"token string\">'node_modules'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 如果有一些类库是放在一些奇怪的地方的，你可以添加自定义的路径或者目录</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<h5>resolve.mainFields</h5>\n<p>当引用的是一个模块或者一个目录时，会使用 package.json 文件的哪一个字段下指定的文件，默认的配置是这样的：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">resolve<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 配置 target === \"web\" 或者 target === \"webworker\" 时 mainFields 默认值是：</span>\n  mainFields<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'browser'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'module'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'main'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// target 的值为其他时，mainFields 默认值为：</span>\n  mainFields<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"module\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"main\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<h5>resolve.mainFiles</h5>\n<p>当目录下没有 package.json 文件时，会默认使用目录下的 index.js 这个文件，其实这个也是可以配置的，是的，使用 resolve.mainFiles 字段，默认配置是：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">resolve<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  mainFiles<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 你可以添加其他默认使用的文件名</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>通常情况下无须修改这个配置，index.js 基本就是约定俗成的了。</p>\n<h5>resolve.resolveLoader</h5>\n<p>这个字段 resolve.resolveLoader 用于配置解析 loader 时的 resolve 配置，原本 resolve 的配置项在这个字段下基本都有。默认的配置：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">resolve<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  resolveLoader<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    extensions<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'.js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.json'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    mainFields<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'loader'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'main'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>这里提供的配置相对少用，一般遵从标准的使用方式，使用默认配置，然后把 loader 安装在项目根路径下的 node_modules 下就可以了。</p>\n<h3>开发与生产环境的构建配置</h3>\n<p>mode 的概念是在 webpack 4.x 引入的。在运行 webpack 时指定使用 <code class=\"language-text\">production</code> 或 <code class=\"language-text\">development</code> 其中一个。</p>\n<ul>\n<li>production mode：默认启动各种性能优化功能，包括构建结果优化和webpack运行性能优化。</li>\n<li>development mode：开启 debug 工具，运行时打印详细的错误信息，快速的增量编译构建。</li>\n</ul>\n<h3>webpack 3.x 区分环境</h3>\n<p>因为 webpack 的运行环境是 Node.js，因此可以通过 Node.js 提供的机制给要运行的 webpack 程序传递环境变量。</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NODE_ENV=production webpack\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"develop\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NODE_ENV=development webpack-dev-server\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在 webpack.config.js 文件中可以通过 process.env.NODE_ENV 来获取命令行传入的环境变量。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ... webpack 配置</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 生产环境需要做的事情，如使用代码压缩插件等</span>\n  config<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">UglifyJsPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> config</code></pre></div>\n<p>在应用代码运行时，也可以通过 process.env.NODE_ENV 获取。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'development'</span> <span class=\"token operator\">&amp;&amp;</span> console <span class=\"token operator\">&amp;&amp;</span> console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在 webpack 3.x 中需要通过 DefinePlugin 插件，来定义变量。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token comment\">// webpack 的配置</span>\n\n  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>DefinePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// webpack 3.x 的 process.env.NODE_ENV 是通过手动在命令行中指定 NODE_ENV=... 的方式来传递的</span>\n      <span class=\"token string\">'process.env.NODE_ENV'</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>环境差异配置</h4>\n<ul>\n<li>\n<p>生产环境</p>\n<ul>\n<li>分离 CSS 成单独文件，以便于多个页面共享一个 CSS 文件</li>\n<li>压缩 HTML/CSS/JS</li>\n<li>压缩图片</li>\n</ul>\n</li>\n<li>\n<p>开发环境</p>\n<ul>\n<li>生成 sourcemap 文件</li>\n<li>打印 debug 信息</li>\n<li>live reload 或 hot reload 功能</li>\n</ul>\n</li>\n</ul>\n<p>webpack 4.x 的 mode 为 preduction 时默认使用 JS 代码压缩，而 mode 为 development 时默认启用 hot reload。</p>\n<p>*sourcemap: 是一个信息文件，里面储存着位置信息。即转换后的代码的每一个位置，所对应的转换前的位置。\n*live reload：自动刷新页面\n*hot reload：热加载</p>\n<h3>资源优化加载</h3>\n<h4>图片压缩</h4>\n<p>通过 image-webpack-loader 来压缩文件。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">.*\\.(gif|png|jpe?g|svg|webp)$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">,</span>\n        use<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span>\n            loader<span class=\"token operator\">:</span> <span class=\"token string\">'file-loader'</span><span class=\"token punctuation\">,</span>\n            options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span>\n            loader<span class=\"token operator\">:</span> <span class=\"token string\">'image-webpack-loader'</span><span class=\"token punctuation\">,</span>\n            options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n              mozjpeg<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 压缩 jpeg 的配置</span>\n                progressive<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                quality<span class=\"token operator\">:</span> <span class=\"token number\">65</span>\n              <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n              optipng<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 使用 imagemin-optipng 压缩 png，enable: false 为关闭</span>\n                enabled<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n              <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n              pngquant<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 使用 imagemin-pngquant 压缩 png</span>\n                quality<span class=\"token operator\">:</span> <span class=\"token string\">'65-90'</span><span class=\"token punctuation\">,</span>\n                speed<span class=\"token operator\">:</span> <span class=\"token number\">4</span>\n              <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n              gifsicle<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 压缩 gif 的配置</span>\n                interlaced<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n              <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n              webp<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 开启 webp，会把 jpg 和 png 图片压缩为 webp 格式</span>\n                quality<span class=\"token operator\">:</span> <span class=\"token number\">75</span>\n              <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>url-loader 配置 limit，将其转换为一个 base64 编码的 DataURL。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(png|jpg|gif)$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        use<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span>\n            loader<span class=\"token operator\">:</span> <span class=\"token string\">'url-loader'</span><span class=\"token punctuation\">,</span>\n            options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n              limit<span class=\"token operator\">:</span> <span class=\"token number\">8192</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 单位是 Byte，当文件小于 8KB 时作为 DataURL 处理</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>代码压缩</h4>\n<p>html-webpack-plugin 插件可以生成所需要的 HTML 并对其压缩。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      filename<span class=\"token operator\">:</span> <span class=\"token string\">'index.html'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 配置输出文件名和路径</span>\n      template<span class=\"token operator\">:</span> <span class=\"token string\">'assets/index.html'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 配置文件模板</span>\n      minify<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 压缩 HTML 的配置</span>\n        minifyCSS<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 压缩 HTML 中出现的 CSS 代码</span>\n        minifyJS<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 压缩 HTML 中出现的 JS 代码</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>css-loader 提供了压缩 CSS 代码的功能。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token comment\">// ...</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.css</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        include<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        use<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token string\">'style-loader'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span>\n            loader<span class=\"token operator\">:</span> <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">,</span>\n            options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n              minimize<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 使用 css 的压缩功能</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>分离代码文件</h4>\n<p>CSS 文件分离，可在 webpack 中使用 extract-text-webpack-plugin。</p>\n<p>JS 文件分离，在 3.x 版本中使用 CommonsChunkPlugin 来作代码分离的，而 4.x 则把相关的功能包装到 optimize.splitChunks 中，直接使用配置实现代码分离。</p>","frontmatter":{"title":"webpack配置总结","date":"April 07, 2019","description":null}},"previous":{"fields":{"slug":"/about-decorator/"},"frontmatter":{"title":"关于修饰器Decorator"}},"next":{"fields":{"slug":"/redux-store-design-optimization/"},"frontmatter":{"title":"redux store 设计优化问题"}}},"pageContext":{"id":"55cf0388-d9dc-52b8-bdfb-33ed1f468ef8","previousPostId":"72a9c424-0af5-5e47-bea6-affeed552e49","nextPostId":"7bd4c793-b89e-56e7-850e-a57c9788a634"}},"staticQueryHashes":["2841359383","3274528899","4152100472"]}