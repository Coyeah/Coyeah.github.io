{"componentChunkName":"component---src-templates-blog-post-js","path":"/about-decorator/","result":{"data":{"site":{"siteMetadata":{"title":"Coyeah's Blog","siteUrl":"https://www.coyeah.top"}},"markdownRemark":{"id":"72a9c424-0af5-5e47-bea6-affeed552e49","excerpt":"ES7 的 JavaScript 修饰器 什么是修饰器 修饰器（Decorator）是 ES…","html":"<h2>ES7 的 JavaScript 修饰器</h2>\n<h3>什么是修饰器</h3>\n<p>修饰器（Decorator）是 ES7 的一个提案，它的出现能够解决两个问题：</p>\n<ul>\n<li>不同类间共享方法</li>\n<li>编译期对类和方法的行为进行改变</li>\n</ul>\n<p>用法也很简单。就是在类或者方法前加一个 <code class=\"language-text\">@</code> 符号。</p>\n<h3>修饰器特点</h3>\n<ul>\n<li>修饰器本质上是一个函数</li>\n<li>被修饰对象可以使用多个修饰器</li>\n<li>修饰器可以带参数</li>\n</ul>\n<h3>简单的修饰器例子</h3>\n<h4>1. 修饰类</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">@setProp\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">setProp</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    target<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">30</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这个例子要表达的是对 User 类使用 setProp 这个方法进行修饰，用来添加 User 类中的 age 属性。而 setProp 传入的 target 参数，代表着 User 类本身。</p>\n<h4>2. 修饰类（自定义参数值）</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">@<span class=\"token function\">setProp</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">setProp</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        target<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> value\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>此例和上面功能基本一致，唯一差别在于值是参考修饰函数传过来的。</p>\n<h4>3. 修饰方法</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n    @readonly\n    <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'Hello World'</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// readonly修饰函数，对方法进行只读操作</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">readonly</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> descriptor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    descriptor<span class=\"token punctuation\">.</span>writable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">return</span> descriptor\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> u <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 尝试修改函数，在控制台会报错</span>\nu<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getName</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'I will override'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上例中，我们对 User 类中的 getName 方法使用了 readonly 修饰器进行修饰，使得方法不能被修改。</p>\n<p>解释下参数：参数 target，就是 getName 方法本身；参数 name，就是方法名；参数 descriptor，对应着的是 Object.defineProperty 的三个参数。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// {</span>\n<span class=\"token comment\">//   configurable: true,    // 当且仅当指定对象的属性描述可以被改变或者属性可被删除时，为true。</span>\n<span class=\"token comment\">//   enumerable: true,      // 当且仅当指定对象的属性可以被枚举出时，为 true。</span>\n<span class=\"token comment\">//   value: \"text\",         // 该属性的值(仅针对数据属性描述符有效)</span>\n<span class=\"token comment\">//   writable: true         // 当且仅当属性的值可以被改变时为true。(仅针对数据属性描述有效)</span>\n<span class=\"token comment\">// }</span></code></pre></div>\n<h3>投入实际应用的修饰器</h3>\n<h4>1. 日志管理</h4>\n<p>在用 webpack 打包时，经常需要好多步骤，比如第一步读取 package.json 文件，第二步处理该文件，第三部加载 webpack.config.js 文件，第四步进行打包等等。为了直观我们需要在每一步打印一些日志文件，知道每一步都干了什么事情，而打印日志的操作和业务代码完全没有关系，我们不应该把日志和业务掺和在一起，这样使用修饰器就能够避免这个问题。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Pack</span> <span class=\"token punctuation\">{</span>\n    @<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'读取package.json文件'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">step1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// do something...</span>\n        <span class=\"token comment\">// 没有修饰器之前，我们通常把console.log放到这里写</span>\n        <span class=\"token comment\">// 放到函数里面写会有两个坏处</span>\n        <span class=\"token comment\">//     1.console和业务无关，会破坏函数单一性原则</span>\n        <span class=\"token comment\">//     2.如果要删除所有的console，那我们只能深入到每一个方法中</span>\n    <span class=\"token punctuation\">}</span>\n    @<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'合并webpack配置文件'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">step2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// do something...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> descriptor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 在这里，我们还可以拿到函数的参数，打印更加详细的信息</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> pack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\npack<span class=\"token punctuation\">.</span><span class=\"token function\">step1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\npack<span class=\"token punctuation\">.</span><span class=\"token function\">step2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4>2. 检查登录</h4>\n<p>在实际的开发中，我们需要在一些操作前来判断用户是否已经登录，比如点赞、结算、发送消息等。按照以前的写法，我们必须在每一个方法中添加判断用户登录的情况，然后再进行业务的操作，然而这些前置条件和业务又混在一起，因此修饰器又一次优雅地解决了问题。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 获取已登录用户的用户信息</span>\n    @checkLogin\n    <span class=\"token function\">getUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/**\n         * 之前，我们都会这么写：\n         *      if(checkLogin()) {\n         *          // 业务代码\n         *      }\n         *  这段代码会在每一个需要登录的方法中执行\n         *  还是上面的问题，执行的前提和业务又混到了一起\n         */</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'获取已登录用户的用户信息'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 发送消息</span>\n    @checkLogin\n    <span class=\"token function\">sendMsg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'发送消息'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 检查用户是否登录，如果没有登录，就跳转到登录页面</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">checkLogin</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> descriptor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> method <span class=\"token operator\">=</span> descriptor<span class=\"token punctuation\">.</span>value\n\n    <span class=\"token comment\">// 模拟判断条件</span>\n    <span class=\"token keyword\">let</span> isLogin <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\n    descriptor<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">value</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isLogin<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">method</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'没有登录，即将跳转到登录页面...'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> u <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nu<span class=\"token punctuation\">.</span><span class=\"token function\">getUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nu<span class=\"token punctuation\">.</span><span class=\"token function\">sendMsg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"关于修饰器Decorator","date":"April 03, 2019","description":null}},"previous":{"fields":{"slug":"/genetic-algorithm-with-js/"},"frontmatter":{"title":"用JavaScript做遗传算法的小Demo"}},"next":{"fields":{"slug":"/webpack-configuration-summay/"},"frontmatter":{"title":"webpack配置总结"}}},"pageContext":{"id":"72a9c424-0af5-5e47-bea6-affeed552e49","previousPostId":"8b8e9b69-d199-5437-a555-1ed33212dac4","nextPostId":"55cf0388-d9dc-52b8-bdfb-33ed1f468ef8"}},"staticQueryHashes":["2841359383","3274528899","4152100472"]}