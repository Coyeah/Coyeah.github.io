{"componentChunkName":"component---src-templates-blog-post-js","path":"/processing-the-binary-stream/","result":{"data":{"site":{"siteMetadata":{"title":"Coyeah's Blog","siteUrl":"https://www.coyeah.top"}},"markdownRemark":{"id":"6ee914a0-c963-56af-be93-ceeb95d493a8","excerpt":"事件的起源是 POST 请求后后端返回了一串二进制流，告诉我这就是 Excel，问我前端能不能处理。让我衍生出一个想法，前端是不是可以不通过服务器对文件下载。很多次在处理批量数据的时候，愁着怎么把数据对象用文件保存下来。说来就来。 浏览器玩二进制 Blob 对象 Blob…","html":"<p>事件的起源是 POST 请求后后端返回了一串二进制流，告诉我这就是 Excel，问我前端能不能处理。让我衍生出一个想法，前端是不是可以不通过服务器对文件下载。很多次在处理批量数据的时候，愁着怎么把数据对象用文件保存下来。说来就来。</p>\n<h2>浏览器玩二进制</h2>\n<h3>Blob 对象</h3>\n<blockquote>\n<p>Blob 对象表示一个不可变、原始数据的类文件对象。Blob 表示的不一定是JavaScript原生格式的数据。File 接口基于Blob，继承了 blob 的功能并将其扩展使其支持用户系统上的文件。—— MDN</p>\n</blockquote>\n<p>浏览器中的 Blob 和 MYSQL 中的 BLOB 类型在概念上有点区别。MYSQL 中的 BLOB 类型就只是个二进制数据容器，浏览器中的 Blob 除了存放二进制数据，还可以设置 MINE 类型，相当于对文件的存储。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> blob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">,</span> Options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>通过构造方法，创建一个 Blob 对象，两个属性一个方法。传入值必须是是数组类型。</p>\n<ul>\n<li>blob.size: Blob 对象中所包含数据的大小（字节）</li>\n<li>blob.type: Blob 对象所包含数据的MIME类型</li>\n<li>blob.slice: 对 Blob 对象进行截取，返回一个新的 Blob 对象</li>\n</ul>\n<p>除了对文件的处理，Blob 对象通过截取可以对大文件类型分段上传。</p>\n<h3>URL 对象</h3>\n<p>Blob 对象要被使用，可以通过 URL.createObjectURL 方法，官方解释：</p>\n<blockquote>\n<p>URL.createObjectURL() 静态方法会创建一个 DOMString，其中包含一个表示参数中给出的对象的URL。这个 URL 的生命周期和创建它的窗口中的 document 绑定。这个新的URL 对象表示指定的 File 对象或 Blob 对象。 —— MDN</p>\n</blockquote>\n<h3>实现下载</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> blob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>target<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>type<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> link <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlink<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlink<span class=\"token punctuation\">.</span>download <span class=\"token operator\">=</span> filename<span class=\"token punctuation\">;</span>\nlink<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>模拟浏览器 <code class=\"language-text\">&lt;a&gt;</code> 标签被点击的事件，触发浏览器机制对识别 URL，从而把二进制流文件下载下来。</p>\n<h2>在 Node 上玩玩二进制流</h2>\n<p>Stream，流！</p>\n<p>是数据的集合 —— 就像数组或字符串一样。区别在于流中的数据可能不会立刻就全部可用，并且你无需一次性地把这些数据全部放入内存。</p>\n<p>可以理解为水流，说起水流，自然就有方向可言，根据方向来区分出三种类型：</p>\n<ul>\n<li>设备流向程序：readable;</li>\n<li>程序流向设备：writable;</li>\n<li>双向：duplex、transform;</li>\n</ul>\n<p>如果你要从网站上看视频，node 可以想这样给你发送视频：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nhttp<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>moviePath<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8080</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>但是这样似乎太慢了，显示需要把文件读完，然后把文件放入内存。文件过大的时候就要等很久，内存占用很大。用流的方式，就可以一点点的送上前端。</p>\n<p>所有的流都是 EventEmitter 的实例。它们发出可用于读取或写入数据的事件。然而，我们可以利用 pipe 方法以一种更简单的方式使用流中的数据。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nhttp<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n   fs<span class=\"token punctuation\">.</span><span class=\"token function\">createReadStream</span><span class=\"token punctuation\">(</span>moviePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8080</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在<a href=\"https://github.com/Coyeah/wherever\">wherever@0.3.4</a>中实践。\nwherever 是一个 Node 静态资源服务器，<code class=\"language-text\">--image</code> 开启 Image base64 模式，对图片创建出 base64 的图片文件。</p>","frontmatter":{"title":"处理二进制流的小白玩法","date":"March 22, 2019","description":null}},"previous":{"fields":{"slug":"/understand-ast-and-babel/"},"frontmatter":{"title":"浅谈对AST的理解，动手写写Babel插件"}},"next":{"fields":{"slug":"/front-end-performance-monitoring/"},"frontmatter":{"title":"前端性能监控Performance"}}},"pageContext":{"id":"6ee914a0-c963-56af-be93-ceeb95d493a8","previousPostId":"531727aa-6909-5dd0-aef5-ed784c60971b","nextPostId":"08358634-b861-5a80-9baf-db5fa49ae407"}},"staticQueryHashes":["2841359383","3274528899","4152100472"]}