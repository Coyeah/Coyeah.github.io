{"componentChunkName":"component---src-templates-blog-post-js","path":"/use-hooks-handle-state/","result":{"data":{"site":{"siteMetadata":{"title":"Coyeah's Blog","siteUrl":"https://www.coyeah.top"}},"markdownRemark":{"id":"b8a6d19e-8a0a-5fa6-be7c-21143aaf1115","excerpt":"有想过这个问题，hooks的出现是否能够取缔传统的状态管理方式，如redux和mobx，寻思着不通过context的方式做全局处理（context + useReducer实现了redux的方式，还是偏炒冷饭），结果在github上就看到了hox…","html":"<p>有想过这个问题，hooks的出现是否能够取缔传统的状态管理方式，如redux和mobx，寻思着不通过context的方式做全局处理（context + useReducer实现了redux的方式，还是偏炒冷饭），结果在github上就看到了<a href=\"https://github.com/umijs/hox\">hox</a>，实现效果正是所想，佐证了我思路还是正确的～</p>\n<p>代码很简短，细细品。</p>\n<h2>前菜</h2>\n<p>Container，数据存储容器，用于数据分发，观察者模式的设计模式。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Container</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">hook</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  subscribers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tdata<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> subscriber <span class=\"token keyword\">of</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subscribers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">subscriber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>    \n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Executor，直译执行者，无论 <code class=\"language-text\">mobx</code> 还是 <code class=\"language-text\">redux</code> 都是用根节点上的 context 作为数据存储点，而在 hox 上则是用 <code class=\"language-text\">&lt;Executor /&gt;</code> 组件作为数据存储点。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">/*\n\tExecutor 作为一个组件，但是返回 null，实际仅仅是调用hooks和更新触发。\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Executor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span><span class=\"token function\">hook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  props<span class=\"token punctuation\">.</span><span class=\"token function\">onUpdate</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span> <span class=\"token keyword\">as</span> React<span class=\"token punctuation\">.</span>ReactElement<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>主菜</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">createModel</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">hook</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建一个 div 节点</span>\n  <span class=\"token keyword\">const</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Container</span><span class=\"token punctuation\">(</span>hook<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建一个数据存储容器</span>\n  <span class=\"token comment\">// 把组件渲染到 div 节点上，但是这个 div 节点并没有出现在实际的 html 树上</span>\n  <span class=\"token comment\">// 奇妙点就在这，这并不影响整体的页面效果，但是在虚拟层面上做了数据的存储处理，这个 div 存在于内存，React的虚拟 dom 中。</span>\n  ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  \t<span class=\"token operator\">&lt;</span>Executor\n\t\t\tonUpdate<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\tcontainer<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 保存新的 data 值</span>\n    \t\tcontainer<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 分发数据给订阅者</span>\n    \t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>    \n      hook<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>hook<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    element\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;====== 撒冷 / 天空城</span>\n  <span class=\"token comment\">// useModel 是用在业务页面，但是中间逻辑是链接到”撒冷“上的。相当于传输管道，从“天空城”拿下数据，业务页面使用和操作。</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useModel</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">depsFn</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>\n    \tcontainer <span class=\"token operator\">?</span> container<span class=\"token punctuation\">.</span>data <span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 主存储</span>\n  \t<span class=\"token keyword\">const</span> depsFnRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span>depsFn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 依赖方法，传入新数据，传出{} / []，与 hooks 方法的第二个参数类似，不过这个是一个 function</span>\n    depsFnRef<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> depsFn<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> depsRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//</span>\n    <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>container<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 这个方法作用在于，当”撒冷“上的数据发生改变，发送新数据到订阅者上时，这个作用在业务页面上的 useModel 需要作出响应来改变存储值，相当于一个拉取数据的操作。</span>\n      <span class=\"token keyword\">function</span> <span class=\"token function\">subscriber</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>depsFnRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">const</span> oldDeps <span class=\"token operator\">=</span> depsRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span> \n          <span class=\"token keyword\">const</span> newDeps <span class=\"token operator\">=</span> depsFnRef<span class=\"token punctuation\">.</span><span class=\"token function\">current</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>oldDeps<span class=\"token punctuation\">,</span> newDeps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 新老依赖的浅比较，判断是否更新数据</span>\n            <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          depsFn<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> newDeps<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n      container<span class=\"token punctuation\">.</span>subscribers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>subscriber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 添加订阅，数据改变则触发该方法</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        container<span class=\"token punctuation\">.</span>subscribers<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>subscriber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 组件重新渲染时需要取消订阅，详见 useEffect。</span>\n      <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>container<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \t<span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>useModel<span class=\"token punctuation\">,</span> <span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> container<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 添加 data 属性，便于数据获取。</span>\n\t<span class=\"token keyword\">return</span> useModel<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>甜品</h2>\n<p>简单的demo。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// model.js</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useId</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> set<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token function\">generateUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reset</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token function\">generateUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> state<span class=\"token punctuation\">,</span> reset <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// page 1</span>\n<span class=\"token keyword\">const</span> Page1<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">FC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">,</span> reset\n  <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>This is a endurance page <span class=\"token number\">1.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>id<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>Button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>reset<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>reset<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// page 2</span>\n<span class=\"token keyword\">const</span> Page2<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">FC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">,</span> reset\n  <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>This is a endurance page <span class=\"token number\">2.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>id<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>Button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>reset<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>reset<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>小结</h2>\n<p>随着 hooks 越来越普及，越来越多好玩的写法都出来了，各种结合式的玩法特别有趣，阅读源码下来收获颇丰，还有更多的玩法有待继续探索了。对于 hox 也是简单的解读了一下，不正确的地方请斧正。给自己也立一个 flag，待完成的课题：<code class=\"language-text\">如何完善基于 hooks 的持久化数据管理</code>。</p>","frontmatter":{"title":"用hooks来状态管理和解读hox","date":"November 08, 2019","description":null}},"previous":{"fields":{"slug":"/react-dnd-summary/"},"frontmatter":{"title":"react-dnd 小结"}},"next":{"fields":{"slug":"/2019-annual-summary/"},"frontmatter":{"title":"2019年终总结"}}},"pageContext":{"id":"b8a6d19e-8a0a-5fa6-be7c-21143aaf1115","previousPostId":"4d08961f-423b-5094-a51f-9d9004289fae","nextPostId":"21415dfa-f448-5dc1-b313-df9554118646"}},"staticQueryHashes":["2841359383","3274528899","4152100472"]}