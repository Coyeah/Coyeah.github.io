{"componentChunkName":"component---src-templates-blog-post-js","path":"/react-dnd-summary/","result":{"data":{"site":{"siteMetadata":{"title":"Coyeah's Blog","siteUrl":"https://www.coyeah.top"}},"markdownRemark":{"id":"4d08961f-423b-5094-a51f-9d9004289fae","excerpt":"react-dnd 是 react 的一个拖拽插件，在 react 升级了 hooks 功能后也配置了一系列拖拽功能的自定义 hooks。官网地址 回看以前使用 react-dnd…","html":"<p>react-dnd 是 react 的一个拖拽插件，在 react 升级了 hooks 功能后也配置了一系列拖拽功能的自定义 hooks。<a href=\"https://github.com/react-dnd/react-dnd/\">官网地址</a></p>\n<p>回看以前使用 react-dnd 感觉比较复杂，因为要声明 <code class=\"language-text\">collect</code>、<code class=\"language-text\">source</code>、<code class=\"language-text\">target</code> 然后往 <code class=\"language-text\">DragSource</code> \\ <code class=\"language-text\">DropTarget</code> 里塞。无论是用装饰器还是柯里化，代码乍眼一看小复杂的（真正使用的时候又不是这回事的感觉）。</p>\n<h2>本文 demo</h2>\n<p><a href=\"https://github.com/Coyeah/react-primer/tree/master/demo15\">react-primer/demo15</a></p>\n<p>多多支持一下 Start 一下！感谢</p>\n<h2>用法小解</h2>\n<h3>useDrag</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">DraggableComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>collectedProps<span class=\"token punctuation\">,</span> drag<span class=\"token punctuation\">,</span> preview<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useDrag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    item<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">,</span> type <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">collect</span><span class=\"token operator\">:</span> <span class=\"token parameter\">monitor</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    \t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DragPreviewImage</span></span> <span class=\"token attr-name\">connect</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>preview<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    \t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>drag<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  \t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>返回的参数：</p>\n<ul>\n<li><code class=\"language-text\">index 0</code>: 收藏家，从 <code class=\"language-text\">useDrag</code> 传参中的 <code class=\"language-text\">collect</code> 属性返回的对象都会放入收藏家中，如果没有定义 <code class=\"language-text\">collect</code> 则会返回一个控对象，所以是一一对应的。</li>\n<li><code class=\"language-text\">index 1</code>: 一个 <code class=\"language-text\">drag source</code> 元素，放置到 div 的 ref 中就会让该元素被拖拽起来。</li>\n<li><code class=\"language-text\">index 2</code>: 一个 <code class=\"language-text\">drag preview</code> 元素，用作于被拖拽起来后跟随鼠标的视图所展示的内容。联合 <code class=\"language-text\">DragPreviewImage</code> 组件一起使用的。</li>\n</ul>\n<p>初始化传参的部分内容：</p>\n<ul>\n<li><code class=\"language-text\">item</code>: 通行证，拖拽内容的标示，通常以 <code class=\"language-text\">{ type, id }</code> 为主要内容，官方不建议存放太多内容，因为每一点点拖拽都要疯狂传递，内容多了就大了，影响性能。</li>\n<li><code class=\"language-text\">begin(monitor)</code>: 开始拖拽时会调用。</li>\n<li><code class=\"language-text\">end(item, monitor)</code> : 结束拖拽时会调用</li>\n<li><code class=\"language-text\">canDrag(monitor)</code>: 用它来限定当前是否允许拖动。如果您想要始终允许它，只需省略此方法即可。</li>\n<li><code class=\"language-text\">isDragging(monitor)</code>: 默认情况下，仅启动拖动操作的拖动源被视为拖动。</li>\n<li><code class=\"language-text\">collect</code>: 下文解释。</li>\n</ul>\n<p>解释得比较笼统，详情请看<a href=\"https://react-dnd.github.io/react-dnd/docs/api/use-drag\">官方解释</a>。</p>\n<h3>useDrop</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">DropTarget</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>collectedProps<span class=\"token punctuation\">,</span> drop<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useDrop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    accept<span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">collect</span><span class=\"token operator\">:</span> <span class=\"token parameter\">monitor</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">ref</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>drop<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Drop Target</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>返回的参数：</p>\n<ul>\n<li><code class=\"language-text\">index 0</code>: 收藏家 again～</li>\n<li><code class=\"language-text\">index 1</code>: 一个 <code class=\"language-text\">drop source</code> 元素，让 <code class=\"language-text\">drag source</code> 对象可以放置的作用，放置到 div 的 ref 就会起作用了。</li>\n</ul>\n<p>初始化传参的部分内容：</p>\n<ul>\n<li><code class=\"language-text\">accept</code>: 一个 string 或者 symbol，放置 <code class=\"language-text\">drag source</code> 中通行证  <code class=\"language-text\">item</code> 中 type 的内容，表示允许哪种类型的 <code class=\"language-text\">drag source</code> 放下。</li>\n<li><code class=\"language-text\">drop(item, monitor)</code>: 当放置元素被拖拽元素放下的时候调用，你可以返回 undefined 或者一个普通函数。如果返回一个普通函数，这个结果会在 <code class=\"language-text\">monitor.getDropResult()</code> 函数的的结果呈现。如果你希望根据接收到的目标不同而作出不同的反应，This is useful！如果你是嵌套的放置元素，可以通过 <code class=\"language-text\">monitor.didDrop()</code> 和 <code class=\"language-text\">monitor.getDropResult()</code> 来进行对比判断是否放置到你所想要的位置。如果 <code class=\"language-text\">canDrop()</code> 返回的是false 就不会调用这些方法哟。</li>\n<li><code class=\"language-text\">hover(item, monitor)</code>: 当拖拽元素被拖到放置元素上方的时候，即悬停，就会被调用，而且是疯狂调用哟，反正就是不断触法触发触法的。可以通过 <code class=\"language-text\">monitor.isOver({ shallow: true })</code> 来检测一下悬停是仅发生在当前目标上还是发生在嵌套目标上。即是 <code class=\"language-text\">canDrop()</code> 返回为 false 也会调用。</li>\n<li><code class=\"language-text\">canDrop(item, monitor)</code>: 用它来限定是否接收这个孤独的拖拽元素。如果您想要始终允许它，只需省略此方法即可。</li>\n<li><code class=\"language-text\">collect</code>: 下文解释要来了。</li>\n</ul>\n<p>详情再次请看<a href=\"https://react-dnd.github.io/react-dnd/docs/api/use-drop\">官方解释</a></p>\n<h3>collect</h3>\n<p><code class=\"language-text\">collect</code> 放置的是一个方法函数，调用后的返回内容就会给到收藏家。函数的参数为 <code class=\"language-text\">monitor</code>。它是一个 <code class=\"language-text\">DragSourceMonitor</code> 的实例，包含以下的方法。</p>\n<ul>\n<li><code class=\"language-text\">canDrag()</code>: 是否可以被拖拽。如果没有正在进行拖动操作，则返回 true。</li>\n<li><code class=\"language-text\">isDragging</code>: 是否正在被拖动。如果正在进行拖动操作，则返回 true。</li>\n<li><code class=\"language-text\">getItemType()</code>: 返回标识当前拖动项的类型的字符串或ES6符号。 如果没有拖动项目，则返回 <code class=\"language-text\">null</code>。</li>\n<li><code class=\"language-text\">getItem()</code>: 返回表示当前拖动项的普通对象。 每个拖动源都必须通过从其beginDrag（）方法返回一个对象来指定它。 如果没有拖动项目，则返回 <code class=\"language-text\">null</code>。</li>\n<li><code class=\"language-text\">getDropResult()</code>: 返回表示最后记录的放置 <code class=\"language-text\">drop result</code> 对象。</li>\n<li><code class=\"language-text\">didDrop()</code>: 如果某个 <code class=\"language-text\">drop target</code> 处理了 <code class=\"language-text\">drop</code> 事件，则返回 true，否则返回 false。即使 <code class=\"language-text\">target</code> 没有返回 <code class=\"language-text\">drop</code> 结果，<code class=\"language-text\">didDrop()</code> 也会返回true。 在 <code class=\"language-text\">endDrag()</code> 中使用它来测试任何放置目标是否已处理掉落。 如果在 <code class=\"language-text\">endDrag()</code> 之外调用，则返回 false。</li>\n<li><code class=\"language-text\">getInitialClientOffset()</code>: 返回当前拖动操作开始时指针的{x，y} <code class=\"language-text\">client</code> 偏移量。 如果没有拖动项目，则返回 <code class=\"language-text\">null</code>。</li>\n<li><code class=\"language-text\">getInitialSourceClientOffset()</code>: 返回当前拖动操作开始时 <code class=\"language-text\">drag source</code> 组件的根DOM节点的{x，y}<code class=\"language-text\">client</code> 偏移量。 如果没有拖动项目，则返回 <code class=\"language-text\">null</code>。</li>\n<li><code class=\"language-text\">getClientOffset()</code>: 拖动操作正在进行时，返回指针的最后记录的{x，y}<code class=\"language-text\">client</code> 偏移量。 如果没有拖动项目，则返回 <code class=\"language-text\">null</code>。</li>\n<li><code class=\"language-text\">getDifferenceFromInitialOffset()</code>: 返回当前拖动操作开始时鼠标的最后记录 <code class=\"language-text\">client</code> 偏移量与 <code class=\"language-text\">client</code> 偏移量之间的{x，y}差异。 如果没有拖动项目，则返回 <code class=\"language-text\">null</code>。</li>\n<li><code class=\"language-text\">getSourceClientOffset()</code>: 返回 <code class=\"language-text\">drag source</code> 组件的根DOM节点的预计{x，y} <code class=\"language-text\">client</code> 偏移量，基于其在当前拖动操作开始时的位置以及移动差异。 如果没有拖动项目，则返回 <code class=\"language-text\">null</code>。</li>\n</ul>\n<p>官方地址：<a href=\"https://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor\">DragSourceMonitor</a> &#x26; <a href=\"https://react-dnd.github.io/react-dnd/docs/api/drop-target-monitor\">DropTargetMonitor</a></p>\n<h3>DndProvider &#x26; HTML5Backend</h3>\n<blockquote>\n<p>The DndProvider component provides React-DnD capabilities to your application. This must be injected with a backend via the <code class=\"language-text\">backend</code>prop, but it may can be injected with a <code class=\"language-text\">window</code>object.</p>\n</blockquote>\n<p>这句话真的翻译不不过来了，水平有限，如果没有被这个东西包裹的话，就会报错，有点像 redux 需要有 Provider 包裹作全局效果吧。就是为了启用 react-dnd 的效果，提供上下文和注入场景这样子的，欢迎斧正哈。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> HTML5Backend <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dnd-html5-backend'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> DndProvider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dnd'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">YourApp</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DndProvider</span></span> <span class=\"token attr-name\">backend</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>HTML5Backend<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        /* Your Drag-and-Drop Application */\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">DndProvider</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>最后没有尝试的两个</h3>\n<ul>\n<li>Handles and Previews: <a href=\"https://react-dnd.github.io/react-dnd/examples/customize/handles-and-previews\">提供拖拽手柄和拖拽预览的两个例子</a></li>\n<li>Custom Drag Layer: <a href=\"https://react-dnd.github.io/react-dnd/examples/drag-around/custom-drag-layer\">拖拽区域的一个用法</a></li>\n</ul>\n<p>官方例子很详尽。</p>\n<h2>参考链接</h2>\n<p>附上两个事例，不使用 hooks 的 dnd。</p>\n<ul>\n<li><a href=\"https://juejin.im/post/5aebbdedf265da0ba469a56f\">拖拽组件：React DnD 的使用</a></li>\n<li><a href=\"https://juejin.im/post/5aebbdedf265da0ba469a56f\">使用React DND 完成一个简单的卡片排序功能</a></li>\n</ul>","frontmatter":{"title":"react-dnd 小结","date":"August 08, 2019","description":null}},"previous":{"fields":{"slug":"/rxjs-learning-record/"},"frontmatter":{"title":"挤牙膏之旅——RxJS记录"}},"next":{"fields":{"slug":"/use-hooks-handle-state/"},"frontmatter":{"title":"用hooks来状态管理和解读hox"}}},"pageContext":{"id":"4d08961f-423b-5094-a51f-9d9004289fae","previousPostId":"e2250dfd-68df-52b1-9c5a-bb5c3f79096b","nextPostId":"b8a6d19e-8a0a-5fa6-be7c-21143aaf1115"}},"staticQueryHashes":["2841359383","3274528899","4152100472"]}