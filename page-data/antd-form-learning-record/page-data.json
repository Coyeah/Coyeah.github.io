{"componentChunkName":"component---src-templates-blog-post-js","path":"/antd-form-learning-record/","result":{"data":{"site":{"siteMetadata":{"title":"Coyeah's Blog","siteUrl":"https://www.coyeah.top"}},"markdownRemark":{"id":"28c90299-042b-59db-bafa-5bb56179def2","excerpt":"阅读 antd Form 源码笔记记录 Begin 从  开始。实际 create 方法是调用 ，这个库是 antd 的方法库，也是由阿里维护。 转战 ，七百多行的代码，一点一点解析，发现了好多好玩的，其中很多方法都和 Form 中的方法是一样的，熟悉了 Form 的使用方法，看起来相对没那么困难，我是对照着 Form…","html":"<p>阅读 antd Form 源码笔记记录</p>\n<h2>Begin</h2>\n<p>从 <code class=\"language-text\">Form.create</code> 开始。实际 create 方法是调用 <code class=\"language-text\">rc-form/lib/createDOMForm</code>，这个库是 antd 的方法库，也是由阿里维护。</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// [ant-design] components/form/Form.tsx</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token function-variable function\">create</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">create</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>TOwnProps <span class=\"token keyword\">extends</span> FormComponentProps<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>\n    options<span class=\"token operator\">:</span> FormCreateOption<span class=\"token operator\">&lt;</span>TOwnProps<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> FormWrappedProps<span class=\"token operator\">&lt;</span>TOwnProps<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">createDOMForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      fieldNameProp<span class=\"token operator\">:</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token operator\">...</span>options<span class=\"token punctuation\">,</span>\n      fieldMetaProp<span class=\"token operator\">:</span> <span class=\"token constant\">FIELD_META_PROP</span><span class=\"token punctuation\">,</span>\n      fieldDataProp<span class=\"token operator\">:</span> <span class=\"token constant\">FIELD_DATA_PROP</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [rc-form] src/createDOMForm.js</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createDOMForm</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">option</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">createBaseForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>option<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>mixin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>转战 <code class=\"language-text\">createBaseForm</code>，七百多行的代码，一点一点解析，发现了好多好玩的，其中很多方法都和 Form 中的方法是一样的，熟悉了 Form 的使用方法，看起来相对没那么困难，我是对照着 <a href=\"https://3x.ant.design/components/form-cn/#API\">Form 官方文档</a>来慢慢解析的。</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">createBaseForm</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">decorate</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> Form <span class=\"token operator\">=</span> <span class=\"token function\">createReactClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> Form<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>简化代码，不难发现这是一个高阶组件，是对业务组件的一层封装。</p>\n<h2>解读 createFieldsStore</h2>\n<p> <code class=\"language-text\">FieldsStore</code> （src/createFieldsStore.js） 是对数据进行持久化处理的。fieldMeta（数据元）是用于存储单个字段数据的载体对象。该类里的其他方法都是基于数据的 get &#x26; set；在 store 中是存储分别是：<code class=\"language-text\">fields</code>  &#x26; <code class=\"language-text\">fieldsMeta</code> 对象，前者是初始化生成的，是后期操作存储的。</p>\n<p>初始对传入数据进行 <code class=\"language-text\">internalFlattenFields</code> 对数组进行处理。这个处理简单而有精妙，简单是在于很好理解，就是平铺嵌套的逻辑；精妙是在于代码设计上，需要细看与理解。</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">internalFlattenFields</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fields</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">flattenFields</span><span class=\"token punctuation\">(</span>\n    fields<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> node</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">isFormField</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'You must wrap field data with `createFormField`.'</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">treeTraverse</span><span class=\"token punctuation\">(</span>path <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> tree<span class=\"token punctuation\">,</span> isLeafNode<span class=\"token punctuation\">,</span> errorMessage<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isLeafNode</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tree <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">||</span> tree <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Do nothing</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Array</span><span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    tree<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">subTree<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">treeTraverse</span><span class=\"token punctuation\">(</span>\n      <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>path<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">[</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>index<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      subTree<span class=\"token punctuation\">,</span>\n      isLeafNode<span class=\"token punctuation\">,</span>\n      errorMessage<span class=\"token punctuation\">,</span>\n      callback\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// It's object and not a leaf node</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> tree <span class=\"token operator\">!==</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">warning</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> errorMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">subTreeKey</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> subTree <span class=\"token operator\">=</span> tree<span class=\"token punctuation\">[</span>subTreeKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">treeTraverse</span><span class=\"token punctuation\">(</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>path<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>path <span class=\"token operator\">?</span> <span class=\"token string\">'.'</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>subTreeKey<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n        subTree<span class=\"token punctuation\">,</span>\n        isLeafNode<span class=\"token punctuation\">,</span>\n        errorMessage<span class=\"token punctuation\">,</span>\n        callback\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">flattenFields</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">maybeNestedFields<span class=\"token punctuation\">,</span> isLeafNode<span class=\"token punctuation\">,</span> errorMessage</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> fields <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">treeTraverse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> maybeNestedFields<span class=\"token punctuation\">,</span> isLeafNode<span class=\"token punctuation\">,</span> errorMessage<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">path<span class=\"token punctuation\">,</span> node</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    fields<span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> fields<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">(_, node) =&gt; isFormField(node)</code> 这里的关键需要回溯到 createBaseForm 时传入的 mapPropsToFields 对所有字段数据用 Field 构建了一遍。</p>\n<h3>getValidFieldsName</h3>\n<p>获取所有有效的字段名称。</p>\n<h3>getValidFieldsFullName</h3>\n<p>获取完整的字段名称。倘若 name 设置为 <code class=\"language-text\">a.b</code> 或 <code class=\"language-text\">a[b]</code> 的时候，会形成嵌套的对象形式。通过 <code class=\"language-text\">getValidFieldsName</code> 获取所有字段名称逐个遍历，<code class=\"language-text\">startsWith(fullName, partialName) &amp;&amp; [&#39;.&#39;, &#39;[&#39;].indexOf(fullName[partialName.length]) &gt;= 0</code>，提取出完全匹配和嵌套匹配的字段。</p>\n<h3>getNestedFields &#x26; getNestedField</h3>\n<p>获取嵌套资源，关键在于这句 <code class=\"language-text\">fields.reduce((acc, f) =&gt; set(acc, f, getter(f)), {});</code>，需要理解代码嵌套的逻辑，返回的是一个对象，key值为字段名称，value则是对应的数据；</p>\n<p>而 <code class=\"language-text\">getNestedField</code> 则需要截去嵌套的父级；</p>\n<h3>setFields</h3>\n<p>已有字段列表和传入的字段列表合并，从每个字段元里调用 <code class=\"language-text\">getValueFormFields</code> 获取新的 value，放入字段对象中，存入 <code class=\"language-text\">this.fields</code>。</p>\n<h3>getValueFromFields</h3>\n<p>从 fieldMeta 中获取 value 值，若不存在则获取 initialValue。</p>\n<h2>解读 createBaseForm</h2>\n<p>从一些函数方法开始：</p>\n<h3>getFieldProps（获取字段属性）</h3>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// 1、结合传入的 option 组装成新的 field option</span>\n<span class=\"token keyword\">const</span> fieldOption <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">,</span>\n  trigger<span class=\"token operator\">:</span> <span class=\"token constant\">DEFAULT_TRIGGER</span><span class=\"token punctuation\">,</span>\n  valuePropName<span class=\"token operator\">:</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span>\n  validate<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>usersFieldOption<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 2、获取存储在 store 中的字段元</span>\n<span class=\"token keyword\">const</span> fieldMeta <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fieldsStore<span class=\"token punctuation\">.</span><span class=\"token function\">getFieldMeta</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 3、组装组件所需的属性</span>\n<span class=\"token keyword\">const</span> inputProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fieldsStore<span class=\"token punctuation\">.</span><span class=\"token function\">getFieldValuePropValue</span><span class=\"token punctuation\">(</span>fieldOption<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  ref<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCacheBind</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">__ref</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>saveRef<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 4、规范化校验规则，数组内容：数据 + 触发函数标识（如 onChange）</span>\n<span class=\"token keyword\">const</span> validateRules <span class=\"token operator\">=</span> <span class=\"token function\">normalizeValidateRules</span><span class=\"token punctuation\">(</span>\n  validate<span class=\"token punctuation\">,</span>\n  rules<span class=\"token punctuation\">,</span>\n  validateTrigger<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 5、对 Trigger 封装一层 onCollect 与 bind(this)</span>\n<span class=\"token comment\">/*\n\t\tonCollect 从 store 中获取的 action 函数且调用；#2001\n\t\tsetFieldsAsDirty 会把所有的字段添加一个 dirty: true；\n\t\tvalidateFieldsInternal 来校验字段；#2002\n */</span>\n<span class=\"token keyword\">const</span> validateTriggers <span class=\"token operator\">=</span> <span class=\"token function\">getValidateTriggers</span><span class=\"token punctuation\">(</span>validateRules<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nvalidateTriggers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">action</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>inputProps<span class=\"token punctuation\">[</span>action<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  inputProps<span class=\"token punctuation\">[</span>action<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCacheBind</span><span class=\"token punctuation\">(</span>\n    name<span class=\"token punctuation\">,</span>\n    action<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onCollectValidate<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 6、更新字段元</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fieldsStore<span class=\"token punctuation\">.</span><span class=\"token function\">setFieldMeta</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>fieldMeta<span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>fieldOption<span class=\"token punctuation\">,</span>\n  validate<span class=\"token operator\">:</span> validateRules<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>getFieldDecorator（获取进过装饰器的组件实例）</h3>\n<p>这个函数很常见了，使用 antd Form 的必定会使用到的。</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// 1、获取处理过的 props</span>\n<span class=\"token keyword\">const</span> props <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFieldProps</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> fieldOption<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 2、返回一个 React.FC</span>\n<span class=\"token keyword\">return</span> <span class=\"token parameter\">fieldElem</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/*\n  \t\t中间做过一些处理：\n  \t\t获取字段元、记录原始 props 和 ref。\n   */</span>\n  <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">cloneElement</span><span class=\"token punctuation\">(</span>fieldElem<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>props<span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fieldsStore<span class=\"token punctuation\">.</span><span class=\"token function\">getFieldValuePropValue</span><span class=\"token punctuation\">(</span>fieldMeta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>一些函数的补充解读</h2>\n<h3>#2001 onCollect 及相关函数</h3>\n<p>onCollect 是对组件的 action 函数封装，分别有 <code class=\"language-text\">onCollectCommon</code>、<code class=\"language-text\">onCollect</code>、<code class=\"language-text\">onCollectValidate</code>。</p>\n<ul>\n<li>onCollectCommon：触发组件的 action 函数；</li>\n<li>onCollect &#x26; onCollectValidate：触发，设置字段 dirty 为 true，唯一不同的是 <code class=\"language-text\">onCollectValidate</code> 会进行 validateFieldsInternal 检验字段；而 <code class=\"language-text\">onCollect</code> 会判断字段 hasRules 来设置 dirty；</li>\n</ul>\n<h3>#2002 validateFieldsInternal（校验内部字段）</h3>\n<p>1、遍历 fields，记录 <code class=\"language-text\">rules</code>、<code class=\"language-text\">value</code>、<code class=\"language-text\">field</code>，添加 <code class=\"language-text\">validating</code> 和 <code class=\"language-text\">dirty</code> 为 true 的字段。若字段的 <code class=\"language-text\">force !== true &amp;&amp; dirty === false</code> 且 error，记录到 <code class=\"language-text\">alreadyErrors</code>；</p>\n<p>2、调用this.setFields；调用了 <code class=\"language-text\">fieldsStore.setFields</code>；</p>\n<p>3、in case normalize. 从 store 中获取 value 更新记录；</p>\n<p>4、运用了 <code class=\"language-text\">async-validator</code> 库，校验和错误处理；这就是为什么在 Form.Item 输入完以后会触发校验；</p>\n<h2>utils.js 中使用的函数解读记录</h2>\n<ul>\n<li>normalizeValidateRules（规范验证规则）：生成新的校验规则；遍历 <code class=\"language-text\">validate</code>，<code class=\"language-text\">trigger</code> 提取并用数组包装；为添加触发函数标示，用数组的形式；</li>\n<li>getValidateTriggers（获取校验触发函数）：通过 filter > map > reduce 获取一个触发函数的数组；</li>\n</ul>\n<h2>小结</h2>\n<p>对于 Form.create 解读并不算特别细致，主要是对在 Form 组件中常用的函数进行解读，各种还有很多隐藏的使用并没有进行细致的挖掘，例如 <code class=\"language-text\">validating</code>、<code class=\"language-text\">dirty</code> 等，这些属性的具体使用场景是什么，后期慢慢进行补充。从中学习到更多的是，写代码的方式方法。在看看 git 的提交记录，都是三四年前的记录了。证明我的水平还是需要继续加强学习和记录。</p>\n<p>当中问题，欢迎大家斧正和交流。</p>","frontmatter":{"title":"antd探秘之Form篇","date":"March 27, 2020","description":null}},"previous":{"fields":{"slug":"/docker-develop-env-construction/"},"frontmatter":{"title":"Docker搭建环境爬坑计"}},"next":{"fields":{"slug":"/bundleless-exploration-record/"},"frontmatter":{"title":"bundleless一次探索记录"}}},"pageContext":{"id":"28c90299-042b-59db-bafa-5bb56179def2","previousPostId":"6b677b0a-eb84-56f0-8692-9f38386ec863","nextPostId":"3db06860-b651-5150-ac2c-58335de606c6"}},"staticQueryHashes":["2841359383","3274528899","4152100472"]}